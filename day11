Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
The tests are generated such that there is exactly one solution. You may not use the same element twice.
Your solution must use only constant extra space.
Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].

CODE

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int n=numbers.length;
        int i=0,j=n-1;
        int arr[]=new int[2];
        while(i<j){
            int sum=numbers[i]+numbers[j];
            if(sum==target){
                  arr[0]=i+1;
                  arr[1]=j+1;
                  return arr;
            }
            else if (sum<target){
                i++;
            }
            else{
                j--;
            }
        }
        return arr;


    }
} 


Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
 

CODE

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> all = new ArrayList<>();
Arrays.sort(nums);
int n = nums.length;
int i = 0, k, j;

while (i < n - 2) {
    j = i + 1;
    k = n - 1;
    
    while (j < k) {
        int sum = nums[i] + nums[j] + nums[k];

        if (sum == 0) {
            List<Integer> l = new ArrayList<>();
            l.add(nums[i]);
            l.add(nums[j]);
            l.add(nums[k]);
            all.add(l);

            while (j < k && nums[j] == nums[j + 1]) j++; 
            while (j < k && nums[k] == nums[k - 1]) k--;

            j++;
            k--;
        } 
        else if (sum < 0) {
            j++;
        } 
        else {
            k--;
        }
    }
    while (i < n - 2 && nums[i] == nums[i + 1]) i++;  
    i++;
}
 return all;

        
    }
}
