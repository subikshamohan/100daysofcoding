Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 Example 1:

Input: nums = [2,2,1]

Output: 1

Example 2:

Input: nums = [4,1,2,1,2]

Output: 4

Example 3:

Input: nums = [1]

Output: 1

CODE

class Solution {
    public int singleNumber(int[] nums) {
        HashMap<Integer,Integer> mpp=new HashMap<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            mpp.put(nums[i],mpp.getOrDefault(nums[i],0)+1);
        }  
        for(int i=0;i<n;i++){
            if(mpp.get(nums[i])==1){
                return nums[i];
            }
        } 
        return 0;
        
    }
}
